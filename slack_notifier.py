import os
from dotenv import load_dotenv
from slack_sdk import WebClient
from slack_sdk.errors import SlackApiError
from datetime import datetime
import json

# .env ÌååÏùº Î°úÎìú
load_dotenv()

class SlackNotifier:
    def __init__(self):
        self.token = os.getenv('SLACK_BOT_TOKEN')
        self.channel = os.getenv('SLACK_CHANNEL')
        
        # Check if credentials are available
        self.enabled = bool(self.token and self.channel)
        
        if self.enabled:
            self.client = WebClient(token=self.token)
            print(f"SlackNotifier initialized: channel={self.channel}")
        else:
            print("WARNING: Slack notifications disabled - missing token or channel")
        
    def send_notification(self, message, blocks=None):
        """Send notification to Slack - with rich blocks support"""
        # Skip if Slack is not configured
        if not self.enabled:
            return False
            
        try:
            # Truncate long messages in logs
            log_message = message[:50] + "..." if len(message) > 50 else message
            print(f"Sending Slack message: {log_message}")
            
            params = {
                "channel": self.channel,
                "text": message
            }
            
            if blocks:
                params["blocks"] = blocks
                
            response = self.client.chat_postMessage(**params)
            
            if not response["ok"]:
                print(f"Slack message failed: {response.get('error', 'Unknown error')}")
                return False
                
            return True
            
        except SlackApiError as e:
            print(f"Slack API error: {e.response['error']}")
            return False
        except Exception as e:
            print(f"Unexpected error sending Slack message: {str(e)}")
            return False
            
    def notify_signal_execution(self, execution_type, data):
        """ÏãúÍ∑∏ÎÑê Ïã§Ìñâ Í≤∞Í≥º ÏïåÎ¶º - Í∞ïÌôîÎêú Ï†ïÎ≥¥ Ï†úÍ≥µ"""
        try:
            if execution_type == "SELL":
                message, blocks = self._format_sell_notification(data)
            elif execution_type == "BUY":
                message, blocks = self._format_buy_notification(data)
            elif execution_type == "HOLD":
                message, blocks = self._format_hold_notification(data)
            else:
                return False
                
            return self.send_notification(message, blocks)
        except Exception as e:
            print(f"Error sending execution notification: {e}")
            return False
            
    def _format_sell_notification(self, data):
        """Îß§ÎèÑ Ïã§Ìñâ ÏïåÎ¶º Ìè¨Îß∑ - Î¶¨Ïπò Î∏îÎ°ù Ìè¨Îß∑ Ï∂îÍ∞Ä"""
        execution_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # Extract ticker for display (without KRW- prefix)
        ticker_display = data['ticker'].replace("KRW-", "") if data['ticker'].startswith("KRW-") else data['ticker']
        
        # Í∏∞Î≥∏ ÌÖçÏä§Ìä∏ Î©îÏãúÏßÄ
        message = f"""
üî¥ Îß§ÎèÑ Ïã§Ìñâ ÏôÑÎ£å: {ticker_display}
ÏΩîÏù∏: {ticker_display}
ÏàòÎüâ: {data['amount']}
ÌèâÍ∑†Í∞Ä: {data['avg_price']:,.0f} KRW
Ïã§ÌñâÍ∞Ä: {data['execution_price']:,.0f} KRW
ÏàòÏùµÎ•†: {data['profit_rate']:.2f}%
Ïã§ÌñâÏãúÍ∞Ñ: {execution_time}
"""
        
        # Î¶¨Ïπò Î∏îÎ°ù Ìè¨Îß∑
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": f"üî¥ Îß§ÎèÑ Ïã§Ìñâ ÏôÑÎ£å: {ticker_display}",
                    "emoji": True
                }
            },
            {
                "type": "section",
                "fields": [
                    {"type": "mrkdwn", "text": f"*ÏΩîÏù∏:*\n{ticker_display}"},
                    {"type": "mrkdwn", "text": f"*ÏàòÎüâ:*\n{data['amount']}"},
                    {"type": "mrkdwn", "text": f"*ÌèâÍ∑†Í∞Ä:*\n{data['avg_price']:,.0f} KRW"},
                    {"type": "mrkdwn", "text": f"*Ïã§ÌñâÍ∞Ä:*\n{data['execution_price']:,.0f} KRW"},
                    {"type": "mrkdwn", "text": f"*ÏàòÏùµÎ•†:*\n{data['profit_rate']:.2f}%"},
                    {"type": "mrkdwn", "text": f"*Ïã§ÌñâÏãúÍ∞Ñ:*\n{execution_time}"}
                ]
            },
            {"type": "divider"}
        ]
        
        if 'order_id' in data:
            blocks.append({
                "type": "context",
                "elements": [
                    {"type": "mrkdwn", "text": f"Order ID: {data['order_id']}"}
                ]
            })
            
        return message, blocks
            
    def _format_buy_notification(self, data):
        """Îß§Ïàò Ïã§Ìñâ ÏïåÎ¶º Ìè¨Îß∑ - Î¶¨Ïπò Î∏îÎ°ù Ìè¨Îß∑ Ï∂îÍ∞Ä"""
        execution_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # Extract ticker for display (without KRW- prefix)
        ticker_display = data['ticker'].replace("KRW-", "") if data['ticker'].startswith("KRW-") else data['ticker']
        
        # Í∏∞Î≥∏ ÌÖçÏä§Ìä∏ Î©îÏãúÏßÄ
        message = f"""
üü¢ Îß§Ïàò Ïã§Ìñâ ÏôÑÎ£å: {ticker_display}
ÏΩîÏù∏: {ticker_display}
ÏàòÎüâ: {data['amount']}
Îß§ÏàòÍ∞Ä: {data['execution_price']:,.0f} KRW
Ìà¨ÏûêÍ∏àÏï°: {data['investment_amount']:,.0f} KRW
Ïã§ÌñâÏãúÍ∞Ñ: {execution_time}
"""
        
        # Î¶¨Ïπò Î∏îÎ°ù Ìè¨Îß∑ 
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": f"üü¢ Îß§Ïàò Ïã§Ìñâ ÏôÑÎ£å: {ticker_display}",
                    "emoji": True
                }
            },
            {
                "type": "section",
                "fields": [
                    {"type": "mrkdwn", "text": f"*ÏΩîÏù∏:*\n{ticker_display}"},
                    {"type": "mrkdwn", "text": f"*ÏàòÎüâ:*\n{data['amount']}"},
                    {"type": "mrkdwn", "text": f"*Îß§ÏàòÍ∞Ä:*\n{data['execution_price']:,.0f} KRW"},
                    {"type": "mrkdwn", "text": f"*Ìà¨ÏûêÍ∏àÏï°:*\n{data['investment_amount']:,.0f} KRW"},
                    {"type": "mrkdwn", "text": f"*Ïã§ÌñâÏãúÍ∞Ñ:*\n{execution_time}"}
                ]
            },
            {"type": "divider"}
        ]
        
        if 'order_id' in data:
            blocks.append({
                "type": "context",
                "elements": [
                    {"type": "mrkdwn", "text": f"Order ID: {data['order_id']}"}
                ]
            })
        
        # Î™®Î©òÌÖÄ Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Ï∂îÍ∞Ä
        if 'is_momentum' in data and data['is_momentum']:
            blocks.append({
                "type": "context",
                "elements": [
                    {"type": "mrkdwn", "text": f"üöÄ Î™®Î©òÌÖÄ Ìä∏Î†àÏù¥Îìú (Ïä§ÏΩîÏñ¥: {data.get('momentum_score', 0):.1f})"}
                ]
            })
            
        return message, blocks
            
    def _format_hold_notification(self, data):
        """Format HOLD status notification with rich blocks"""
        update_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # Extract ticker for display (without KRW- prefix)
        ticker_display = data['ticker'].replace("KRW-", "") if data['ticker'].startswith("KRW-") else data['ticker']
        
        # Calculate profit emoji
        profit_emoji = "üü¢" if data['profit_rate'] >= 0 else "üî¥"
        
        # Basic text message
        message = f"""
‚ö™ HOLD Status Updated: {ticker_display}
Coin: {ticker_display}
Amount: {data['amount']}
Avg Price: {data['avg_price']:,.0f} KRW
Current Price: {data['current_price']:,.0f} KRW
Profit: {profit_emoji} {data['profit_rate']:.2f}%
Time: {update_time}
"""
        
        # Rich block format
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": f"‚ö™ HOLD Status Updated: {ticker_display}",
                    "emoji": True
                }
            },
            {
                "type": "section",
                "fields": [
                    {"type": "mrkdwn", "text": f"*Coin:*\n{ticker_display}"},
                    {"type": "mrkdwn", "text": f"*Amount:*\n{data['amount']}"},
                    {"type": "mrkdwn", "text": f"*Avg Price:*\n{data['avg_price']:,.0f} KRW"},
                    {"type": "mrkdwn", "text": f"*Current Price:*\n{data['current_price']:,.0f} KRW"},
                    {"type": "mrkdwn", "text": f"*Profit:*\n{profit_emoji} {data['profit_rate']:.2f}%"},
                    {"type": "mrkdwn", "text": f"*Update Time:*\n{update_time}"}
                ]
            },
            {"type": "divider"}
        ]
        
        return message, blocks
            
    def notify_error(self, error_type, error_message):
        """Send error notification with rich block format"""
        error_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        # Basic text message
        message = f"""
‚ùå Error Occurred
Type: {error_type}
Message: {error_message}
Time: {error_time}
"""
        
        # Rich block format
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": f"‚ùå Error: {error_type}",
                    "emoji": True
                }
            },
            {
                "type": "section",
                "fields": [
                    {"type": "mrkdwn", "text": f"*Type:*\n{error_type}"},
                    {"type": "mrkdwn", "text": f"*Time:*\n{error_time}"}
                ]
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"*Error Message:*\n```{error_message}```"
                }
            },
            {"type": "divider"}
        ]
        
        return self.send_notification(message, blocks)
        
    def notify_system_status(self, status_type, data):
        """ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏïåÎ¶º - Ï¢ÖÌï© ÏÉÅÌÉú Î≥¥Í≥†"""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        if status_type == "startup":
            # Check if we're in test mode
            is_test_mode = data.get('test_mode', False)
            mode_str = "üß™ TEST MODE (Small Amounts)" if is_test_mode else "üî¥ PRODUCTION MODE (Full Amounts)"
            
            message = f"üöÄ Trading System Started - {mode_str} ({timestamp})"
            blocks = [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": f"üöÄ MRHA Trading System Starting - {mode_str}",
                        "emoji": True
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {"type": "mrkdwn", "text": f"*ÏãúÏûë ÏãúÍ∞Ñ:*\n{timestamp}"},
                        {"type": "mrkdwn", "text": f"*ÏãúÏä§ÌÖú Î≤ÑÏ†Ñ:*\nEnhanced 2.0"},
                        {"type": "mrkdwn", "text": f"*Mode:*\n{mode_str}"}
                    ]
                },
                {"type": "divider"}
            ]
            
        elif status_type == "execution_summary":
            buy_count = data.get('buy_count', 0)
            sell_count = data.get('sell_count', 0)
            hold_count = data.get('hold_count', 0)
            total_invested = data.get('total_invested', 0)
            total_returned = data.get('total_returned', 0)
            
            message = f"üìä Trade Execution Summary ({timestamp})\nBuy: {buy_count}, Sell: {sell_count}, Hold: {hold_count}"
            
            blocks = [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "üìä Trade Execution Summary",
                        "emoji": True
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {"type": "mrkdwn", "text": f"*Buy Orders:*\n{buy_count}"},
                        {"type": "mrkdwn", "text": f"*Sell Orders:*\n{sell_count}"},
                        {"type": "mrkdwn", "text": f"*Hold Updates:*\n{hold_count}"},
                        {"type": "mrkdwn", "text": f"*Total Invested:*\n{total_invested:,.0f} KRW"},
                        {"type": "mrkdwn", "text": f"*Total Returned:*\n{total_returned:,.0f} KRW"},
                        {"type": "mrkdwn", "text": f"*Completion Time:*\n{timestamp}"}
                    ]
                }
            ]
            
            # Ìä∏Î†àÏù¥Îìú Î™©Î°ù Ï∂îÍ∞Ä
            if 'trades' in data and data['trades']:
                blocks.append({"type": "divider"})
                blocks.append({
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "*Ïã§ÌñâÎêú Ìä∏Î†àÏù¥Îìú:*"
                    }
                })
                
                for trade in data['trades'][:10]:  # ÏµúÎåÄ 10Í∞úÍπåÏßÄ ÌëúÏãú
                    emoji = "üü¢" if trade['type'] == "BUY" else "üî¥"
                    ticker = trade.get('ticker', '').replace('KRW-', '')
                    blocks.append({
                        "type": "section",
                        "text": {
                            "type": "mrkdwn",
                            "text": f"{emoji} *{ticker}*: {trade['type']} @ {trade['price']:,.0f} KRW"
                        }
                    })
        
        elif status_type == "portfolio_update":
            total_value = data.get('total_value', 0)
            coin_count = data.get('coin_count', 0)
            profit = data.get('profit', 0)
            
            message = f"üíº Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏóÖÎç∞Ïù¥Ìä∏ ({timestamp})\nÏ¥ù ÏûêÏÇ∞: {total_value:,.0f} KRW"
            
            blocks = [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "üíº Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏóÖÎç∞Ïù¥Ìä∏",
                        "emoji": True
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {"type": "mrkdwn", "text": f"*Ï¥ù ÏûêÏÇ∞:*\n{total_value:,.0f} KRW"},
                        {"type": "mrkdwn", "text": f"*Î≥¥Ïú† ÏΩîÏù∏ Ïàò:*\n{coin_count}"},
                        {"type": "mrkdwn", "text": f"*ÏàòÏùµÎ•†:*\n{profit:.2f}%"},
                        {"type": "mrkdwn", "text": f"*ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ:*\n{timestamp}"}
                    ]
                }
            ]
            
            # Î≥¥Ïú† ÏΩîÏù∏ Î™©Î°ù Ï∂îÍ∞Ä
            if 'positions' in data and data['positions']:
                blocks.append({"type": "divider"})
                blocks.append({
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "*Î≥¥Ïú† ÏΩîÏù∏:*"
                    }
                })
                
                positions_text = ""
                for pos in data['positions'][:15]:  # ÏµúÎåÄ 15Í∞úÍπåÏßÄ ÌëúÏãú
                    if pos['ticker'] == "KRW":
                        continue
                    profit_emoji = "üü¢" if pos['profit_rate'] >= 0 else "üî¥"
                    positions_text += f"{profit_emoji} *{pos['ticker']}*: {pos['profit_rate']:.2f}%\n"
                
                blocks.append({
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": positions_text
                    }
                })
                
        elif status_type == "signals_update":
            total = data.get('total', 0)
            success = data.get('success', 0)
            failed = data.get('failed', 0)
            buy_count = data.get('buy_count', 0)
            sell_count = data.get('sell_count', 0)
            hold_count = data.get('hold_count', 0)
            momentum_count = data.get('momentum_count', 0)
            
            message = f"üìù ÏãúÍ∑∏ÎÑê ÏóÖÎç∞Ïù¥Ìä∏ ({timestamp})\nÏ¥ù {total}Í∞ú ÏãúÍ∑∏ÎÑê"
            
            blocks = [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "üìù ÏãúÍ∑∏ÎÑê ÏÉùÏÑ± ÏôÑÎ£å",
                        "emoji": True
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {"type": "mrkdwn", "text": f"*Ï¥ù ÏãúÍ∑∏ÎÑê:*\n{total}Í∞ú"},
                        {"type": "mrkdwn", "text": f"*ÏóÖÎç∞Ïù¥Ìä∏ ÏÉÅÌÉú:*\nÏÑ±Í≥µ: {success}, Ïã§Ìå®: {failed}"},
                        {"type": "mrkdwn", "text": f"*BUY ÏãúÍ∑∏ÎÑê:*\n{buy_count}Í∞ú"},
                        {"type": "mrkdwn", "text": f"*SELL ÏãúÍ∑∏ÎÑê:*\n{sell_count}Í∞ú"},
                        {"type": "mrkdwn", "text": f"*HOLD ÏãúÍ∑∏ÎÑê:*\n{hold_count}Í∞ú"},
                        {"type": "mrkdwn", "text": f"*Î™®Î©òÌÖÄ ÏãúÍ∑∏ÎÑê:*\n{momentum_count}Í∞ú"},
                        {"type": "mrkdwn", "text": f"*ÏÉùÏÑ± ÏãúÍ∞Ñ:*\n{timestamp}"}
                    ]
                }
            ]
        
        elif status_type == "test_iteration":
            iteration = data.get('iteration', 0)
            message = f"üß™ ÌÖåÏä§Ìä∏ Î∞òÎ≥µ {iteration} ÏãúÏûë ({timestamp})"
            blocks = [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": f"üß™ ÌÖåÏä§Ìä∏ Î∞òÎ≥µ {iteration} ÏãúÏûë",
                        "emoji": True
                    }
                },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"Ïù¥ ÌÖåÏä§Ìä∏ Î∞òÎ≥µÏóêÏÑúÎäî Ï¶âÏãú ÏãúÍ∑∏ÎÑêÏùÑ ÏÉùÏÑ±ÌïòÍ≥† 5Î∂Ñ ÌõÑÏóê Ïã§ÌñâÌï©ÎãàÎã§.\nÎã§Ïùå ÌÖåÏä§Ìä∏ Î∞òÎ≥µÏùÄ 1ÏãúÍ∞Ñ ÌõÑÏóê ÏãúÏûëÎê©ÎãàÎã§."
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {"type": "mrkdwn", "text": f"*Î∞òÎ≥µ ÌöüÏàò:*\n{iteration}"},
                        {"type": "mrkdwn", "text": f"*ÏãúÏûë ÏãúÍ∞Ñ:*\n{timestamp}"}
                    ]
                },
                {"type": "divider"}
            ]
            
        elif status_type == "test_completed":
            message = f"‚úÖ Test Mode Completed ({timestamp})"
            blocks = [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "‚úÖ Test Mode Completed",
                        "emoji": True
                    }
                },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "Test mode execution is complete. To switch to production mode, set TEST_MODE = False in the code."
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {"type": "mrkdwn", "text": f"*Completion Time:*\n{timestamp}"},
                        {"type": "mrkdwn", "text": "*Next Step:*\nSet TEST_MODE = False for full trading"}
                    ]
                },
                {"type": "divider"}
            ]
            
        elif status_type == "production_running":
            message = f"üî¥ PRODUCTION MODE ACTIVE - FULL ORDER AMOUNTS ({timestamp})"
            blocks = [
                {
                    "type": "header",
                    "text": {
                        "type": "plain_text",
                        "text": "üî¥ PRODUCTION MODE ACTIVE - FULL ORDER AMOUNTS",
                        "emoji": True
                    }
                },
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": "‚ö†Ô∏è *ATTENTION: The system is running in PRODUCTION mode with FULL order amounts.* ‚ö†Ô∏è"
                    }
                },
                {
                    "type": "section",
                    "fields": [
                        {"type": "mrkdwn", "text": f"*Current Time:*\n{timestamp}"},
                        {"type": "mrkdwn", "text": "*Status:*\nMonitoring for signals"}
                    ]
                },
                {"type": "divider"}
            ]
            
        else:  # Í∏∞Î≥∏ ÏÉÅÌÉú Î©îÏãúÏßÄ
            message = f"‚ÑπÔ∏è ÏãúÏä§ÌÖú ÏÉÅÌÉú: {status_type} ({timestamp})"
            blocks = [
                {
                    "type": "section",
                    "text": {
                        "type": "mrkdwn",
                        "text": f"*ÏãúÏä§ÌÖú ÏÉÅÌÉú:* {status_type}\n*ÏãúÍ∞Ñ:* {timestamp}"
                    }
                }
            ]
        
        return self.send_notification(message, blocks)